{"version":3,"sources":["components/BarChart.tsx","components/CountryItem.tsx","components/CountryList.tsx","components/GlobalInfo.tsx","App.tsx","index.tsx"],"names":["options","plugins","legend","display","ChartWrapper","styled","div","BarChart","countries","d","data","labels","forEach","country","push","NewConfirmed","Country","datasets","label","backgroundColor","borderColor","borderWidth","generateChartData","ListItem","li","ListContent","props","isActive","CountryItem","onCountryClick","useState","setIsActive","onClick","handleCountryClick","NewDeaths","NewRecovered","ID","ListWrapper","ul","CountryList","map","intlNumberFormatter","num","Intl","NumberFormat","format","Wrapper","GlobalInfo","newConfirmed","newDeaths","newRecovered","App","undefined","appState","setAppState","activeCountries","setActiveCountries","fetchData","a","fetch","result","json","useEffect","className","styles","css","Global","length","Countries","countryIndex","findIndex","activeCoun","tempActiveCountries","splice","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4385e320.chunk.js","sourcesContent":["import styled from '@emotion/styled'\nimport { ChartData } from 'chart.js'\nimport { Bar } from 'react-chartjs-2'\n\nimport { CountryType } from '../types'\n\ninterface BarChartProps {\n  countries: CountryType[]\n}\n\nconst options = {\n  plugins: {\n    legend: {\n      display: false,\n    },\n  },\n}\n\nconst ChartWrapper = styled.div`\n  max-width: 700px;\n  margin: 0 auto;\n`\n\nconst BarChart: React.FC<BarChartProps> = ({ countries }) => {\n  const generateChartData = (): ChartData => {\n    const data: number[] = []\n    const labels: string[] = []\n\n    countries.forEach((country) => {\n      data.push(country.NewConfirmed)\n      labels.push(country.Country)\n    })\n\n    return {\n      labels,\n      datasets: [\n        {\n          label: 'New Confirmed',\n          data,\n          backgroundColor: [\n            'rgba(255, 99, 132, 0.2)',\n            'rgba(54, 162, 235, 0.2)',\n            'rgba(255, 206, 86, 0.2)',\n            'rgba(75, 192, 192, 0.2)',\n            'rgba(153, 102, 255, 0.2)',\n            'rgba(255, 159, 64, 0.2)',\n          ],\n          borderColor: [\n            'rgba(255, 99, 132, 1)',\n            'rgba(54, 162, 235, 1)',\n            'rgba(255, 206, 86, 1)',\n            'rgba(75, 192, 192, 1)',\n            'rgba(153, 102, 255, 1)',\n            'rgba(255, 159, 64, 1)',\n          ],\n          borderWidth: 1,\n        },\n      ],\n    }\n  }\n\n  const d = generateChartData() as any\n\n  return (\n    <ChartWrapper>\n      <Bar data={d} options={options} />\n    </ChartWrapper>\n  )\n}\n\nexport default BarChart\n","import React, { useState } from 'react'\nimport styled from '@emotion/styled'\nimport { CountryType } from '../types'\n\nconst ListItem = styled.li`\n  list-style: none;\n  flex: 0 0 45%;\n  text-align: center;\n  cursor: pointer;\n\n  @media (min-width: 420px) {\n    flex: 0 0 32%;\n  }\n\n  background-color: lightblue;\n  border: 1px groove lightblue;\n  border-radius: 3px;\n  margin: 2px;\n  padding: 2px;\n`\n\ninterface ListContentProps {\n  isActive: boolean\n}\n\nconst ListContent = styled.div<ListContentProps>`\n  background-color: ${(props) => (props.isActive ? 'lightgreen' : '#8bd4c5')};\n  padding: 2px;\n  height: 100%;\n`\n\ninterface CountryItemProps {\n  country: CountryType\n  onCountryClick: (country: CountryType) => void\n}\n\nconst CountryItem: React.FC<CountryItemProps> = ({\n  country,\n  onCountryClick,\n}) => {\n  const [isActive, setIsActive] = useState<boolean>(false)\n\n  const handleCountryClick = (country: CountryType) => {\n    onCountryClick(country)\n\n    setIsActive(!isActive)\n  }\n\n  return (\n    <ListItem key={country.ID} onClick={() => handleCountryClick(country)}>\n      <ListContent isActive={isActive}>\n        <h4> {country.Country}</h4>\n        <div>New Confirmed: {country.NewConfirmed}</div>\n        <div>New Deaths: {country.NewDeaths}</div>\n        <div>New Recovered: {country.NewRecovered}</div>\n      </ListContent>\n    </ListItem>\n  )\n}\n\nexport default CountryItem\n","import styled from '@emotion/styled'\n\nimport { CountryType } from '../types'\nimport CountryItem from './CountryItem'\n\ninterface CountryListProps {\n  countries: CountryType[]\n  onCountryClick: (country: CountryType) => void\n}\n\nconst ListWrapper = styled.ul`\n  padding: 2px;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n\n  border: 2px solid blueviolet;\n`\n\nconst CountryList: React.FC<CountryListProps> = ({\n  countries,\n  onCountryClick,\n}) => {\n  return (\n    <ListWrapper>\n      {countries.map((country) => (\n        <CountryItem\n          country={country}\n          onCountryClick={onCountryClick}\n          key={country.ID}\n        />\n      ))}\n    </ListWrapper>\n  )\n}\n\nexport default CountryList\n","import styled from '@emotion/styled'\nimport React from 'react'\n\ninterface GlobalInfoProps {\n  newConfirmed: number\n  newDeaths: number\n  newRecovered: number\n}\n\nconst intlNumberFormatter = (num: number) => new Intl.NumberFormat().format(num)\n\nconst Wrapper = styled.div`\n  text-align: center;\n`\n\nconst GlobalInfo: React.FunctionComponent<GlobalInfoProps> = ({\n  newConfirmed,\n  newDeaths,\n  newRecovered,\n}) => {\n  return (\n    <Wrapper>\n      <h1>Global Covid Tracker</h1>\n      <h3>New Confirmed: {intlNumberFormatter(newConfirmed)}</h3>\n      <h3>New Deaths: {intlNumberFormatter(newDeaths)}</h3>\n      <h3>New Recovered: {intlNumberFormatter(newRecovered)}</h3>\n    </Wrapper>\n  )\n}\n\nexport default GlobalInfo\n","import { Global, css } from '@emotion/react'\nimport { useEffect, useState } from 'react'\nimport BarChart from './components/BarChart'\nimport CountryList from './components/CountryList'\nimport GlobalInfo from './components/GlobalInfo'\nimport { CountryType, ResponseDataType } from './types'\n\nconst App: React.FunctionComponent = () => {\n  const [appState, setAppState] = useState<ResponseDataType | undefined>(\n    undefined,\n  )\n\n  const [activeCountries, setActiveCountries] = useState<CountryType[]>([])\n\n  const fetchData = async () => {\n    const result = await fetch(`https://api.covid19api.com/summary`)\n    const data: ResponseDataType = await result.json()\n\n    setAppState(data)\n  }\n\n  const handleCountryClick = (country: CountryType) => {\n    const countryIndex = activeCountries.findIndex(\n      (activeCoun) => activeCoun.ID === country.ID,\n    )\n\n    if (countryIndex > -1) {\n      const tempActiveCountries = [...activeCountries]\n      tempActiveCountries.splice(countryIndex, 1)\n\n      setActiveCountries(tempActiveCountries)\n    } else {\n      setActiveCountries([...activeCountries, country])\n      console.log(`active countries: ${activeCountries}`)\n    }\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Global\n        styles={css`\n          body {\n            background-color: #c7db96;\n          }\n        `}\n      />\n\n      {appState ? (\n        <>\n          <GlobalInfo\n            newConfirmed={appState?.Global.NewConfirmed}\n            newDeaths={appState?.Global.NewDeaths}\n            newRecovered={appState?.Global.NewRecovered}\n          />\n\n          {activeCountries.length > 0 ? (\n            <BarChart countries={activeCountries} />\n          ) : null}\n\n          <CountryList\n            countries={appState.Countries}\n            onCountryClick={handleCountryClick}\n          />\n        </>\n      ) : (\n        <h1>Loading...</h1>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}